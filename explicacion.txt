La función "get_next_line" recibe un argumento "fd", que es un descriptor de archivo. 
La función se utiliza para leer líneas de un archivo.

"static char *depot = NULL;" es una declaración de una variable estática llamada "depot" 
que es un puntero a un carácter (es decir, una cadena de caracteres) y se inicializa en NULL. 
La palabra clave "static" indica que esta variable solo está disponible dentro del archivo 
donde se declaró y no puede ser accedida desde otros archivos. El valor NULL indica que el 
puntero "depot" no está apuntando a ninguna posición de memoria en particular en este momento.

La función tiene una variable "line" que es un puntero a caracteres y una variable "depot" 
que es un puntero estático a caracteres. La variable "depot" se utiliza para almacenar los 
caracteres leídos del archivo que no forman parte de la línea actual.

La función comprueba si el valor de "fd" es menor que cero o si el tamaño del buffer es menor
o igual a cero. Si esto es cierto, la función devuelve "NULL".

La función luego verifica si "depot" tiene un carácter '\n' o si "depot" es nulo. Si es cierto,
se llama a la función "readbuff" para leer más caracteres del archivo y agregarlos a "depot".

Si "depot" es nulo, la función devuelve "NULL".

La función luego llama a la función "new_line" para crear una nueva línea con los caracteres 
almacenados en "depot". Si "new_line" devuelve "NULL", la función llama a la función "ft_free" 
para liberar la memoria de "depot" y devuelve "NULL".

La función luego llama a la función "clean_depot" para limpiar "depot" de los caracteres que 
se utilizaron para crear la nueva línea. Finalmente, la función devuelve la nueva línea.


Funncion readbuff
Esta función lee un archivo (especificado por el descriptor de archivo "fd") y almacena el 
contenido en un buffer temporal llamado "buffer". Utiliza la función "read" para leer el 
archivo en bloques de tamaño "BUFFER_SIZE" hasta que se encuentra un caracter de nueva línea 
('\n') o se llega al final del archivo. Cada bloque de contenido leído se concatena con el 
contenido anterior en "depot" mediante la función "ft_strjoin". Finalmente, se libera la 
memoria asignada a "buffer" y se devuelve "depot" como resultado. Si el descriptor de archivo
es inválido o ocurre un error de lectura, se libera la memoria asignada a "depot" y se 
devuelve NULL.



La función "new_line" toma una cadena de caracteres llamada "depot" como argumento. Declara 
un puntero de caracteres llamado "line" y otro puntero de caracteres llamado "p". También 
declara una variable entera llamada "len".

Luego, utiliza la función "ft_strchar" para buscar el carácter '\n' en la cadena "depot" y
asigna su posición a "p". La variable "len" se calcula como la diferencia entre "p" y 
"depot" más 1.

Luego, se utiliza la función "ft_substr" para extraer una subcadena de "depot" desde 
el índice 0 hasta "len" y se asigna a "line". Si "line" es nulo, la función devuelve 
NULL. De lo contrario, devuelve la cadena "line".




La función "clean_depot" recibe como argumento un puntero a una cadena de caracteres 
(depot) y retorna un puntero a una nueva cadena de caracteres. La función tiene tres 
variables, "new_depot" que es un puntero a una cadena de caracteres que almacenará la 
nueva cadena, "p" que es un puntero a una cadena de caracteres que se usará para buscar
el caractér '\n' en "depot", y "len" que es un entero que almacenará la longitud de 
la nueva cadena.

Primero, se busca el caractér '\n' en "depot" usando la función "ft_strchar" y se 
almacena el resultado en "p". Si "p" es NULL (es decir, si no se encontró el caractér 
'\n' en "depot"), se asigna NULL a "new_depot" y se libera la memoria de "depot" usando 
la función "ft_free" antes de retornar.

Si "p" no es NULL, se calcula la longitud de la nueva cadena como (p - depot) + 1. 
Luego, se comprueba si "depot" en la posición "len" es un caractér nulo. Si es así, 
se libera la memoria de "depot" y se retorna.

Si "depot" en la posición "len" no es un caractér nulo, se crea una nueva cadena 
"new_depot" usando la función "ft_substr" que extrae una subcadena de "depot" desde 
la posición "len" hasta el final de la cadena. Luego, se libera la memoria de "depot" 
usando "ft_free" y se retorna "new_depot". Si "ft_substr" retorna NULL, se retorna NULL.


La función "ft_free" recibe como parámetro un puntero a un puntero de tipo char,
es decir, una variable que almacena la dirección de memoria de otra variable de 
tipo char.

La primera línea de la función utiliza la función "free" para liberar la memoria 
asignada a la variable a la que apunta el puntero recibido como parámetro.

La segunda línea asigna el valor NULL al puntero recibido como parámetro, lo 
que significa que ya no apunta a ninguna dirección de memoria.

La tercera y última línea de la función devuelve el valor NULL.




Funccione utils


ft_strjoin
Esta función toma dos cadenas, "s1" y "s2", y las concatena en una nueva cadena 
"str". La función primero verifica si "s1" es nula, si es así, asigna memoria 
para ella e inicializa con el carácter nulo.

Luego, asigna memoria para la nueva cadena "str" asignando el tamaño de "s1" y 
"s2" más un byte más para el carácter nulo. Si la asignación no fue exitosa 
llama a una función llamada ft_free y pasa la dirección de s1.

Luego utiliza dos bucles mientras para copiar los caracteres de "s1" y "s2" en 
"str" y agrega un carácter nulo al final. Finalmente, libera la memoria asignada 
para "s1" y devuelve la nueva cadena concatenada "str".

Cabe mencionar que la función utiliza ft_strlen(s1) y ft_strlen(s2), que son funciones 
personalizadas que devuelven la longitud de una cadena, en este caso, para calcular 
la cantidad de memoria a asignar para la nueva cadena.


ft_substr
Esta es una función en C llamada "ft_substr" que toma una cadena "s", un entero sin 
signo "start" y un tamaño "len" y devuelve una nueva cadena "res" que es una subcadena 
de la cadena de entrada "s". La función primero verifica si la cadena de entrada "s" 
es nula y si es así, devuelve nulo. Luego, verifica si el valor de "start" es mayor 
que la longitud de la cadena de entrada "s" y si es así, asigna memoria para una nueva 
cadena "res" con un solo carácter nulo y devuelve "res".

Si "start" es menor o igual a la longitud de la cadena de entrada "s", la función luego 
verifica si la longitud de la subcadena, "len", es mayor que los caracteres restantes de 
la cadena de entrada "s" después del índice de inicio y si es así, ajusta "len" para ser
igual a los caracteres restantes.

Entonces, asigna memoria para la nueva cadena "res" con "len" + 1 caracteres. Si la 
asignación no es exitosa, devuelve nulo. La función luego copia los caracteres de la 
cadena de entrada "s" comenzando desde el índice "start" y hasta "len" caracteres en 
la nueva cadena "res" y agrega un carácter nulo al final. Finalmente, devuelve la nueva 
subcadena "res".




ft_strchar
This is a C function called "ft_strchar" that takes in two inputs, a string "str" and 
an integer "c", it converts the integer "c" to a char type variable and then it returns 
a pointer to the first occurrence of the character "c" in the input string "str".

The function starts by initializing an integer variable "i" to 0. Then, it enters a 
while loop that continues until the end of the string is reached, represented by the null 
character '\0'. Inside the while loop, the function compares the current character of the 
string, represented by "str[i]", to the input character "c". If they are equal, the 
function returns the address of that character by taking the address of the string "str" 
and adding the index "i" to it. If the characters are not equal, "i" is incremented and 
the loop continues.

When the end of the string is reached and the character is not found, the function checks 
if the input character is the null character '\0' and if so, it returns the address of 
the null character at the end of the string. If the character is not found and it's not 
'\0' the function returns 0.